{"version":3,"sources":["/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth-routing.module.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.component.scss","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.component.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.module.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/login/login.component.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/register/register.component.scss","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/register/register.component.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/request-password/request-password.component.scss","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/request-password/request-password.component.ts","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/reset-password/reset-password.component.scss","/Users/josealonso/Desktop/wolfmanager/client/src/app/auth/reset-password/reset-password.component.ts"],"names":[],"mappings":"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","file":"auth.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NgxAuthComponent } from './auth.component';\nimport { NgxAuthBlockComponent } from './auth-block/auth-block.component';\nimport { NgxLoginComponent } from './login/login.component';\nimport { NgxRegisterComponent } from './register/register.component';\nimport { NgxRequestPasswordComponent } from './request-password/request-password.component';\nimport { NgxResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: NgxAuthComponent,\n  children: [{\n    path: 'login',\n    component: NgxLoginComponent,\n  }, {\n    path: 'register',\n    component: NgxRegisterComponent,\n  }, {\n    path: 'request-password',\n    component: NgxRequestPasswordComponent,\n  }, {\n    path: 'reset-password',\n    component: NgxResetPasswordComponent,\n  }, {\n    path: '',\n    redirectTo: 'login',\n    pathMatch: 'full',\n  }],\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthsRoutingModule { }\n\nexport const routedComponents = [\n    NgxAuthComponent,\n    NgxLoginComponent,\n    NgxRegisterComponent,\n    NgxRequestPasswordComponent,\n    NgxResetPasswordComponent\n];\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth-routing.module.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \":host /deep/ nb-layout .layout .layout-container .content .columns nb-layout-column {\\n  padding: 2.5rem; }\\n\\n:host /deep/ nb-card {\\n  height: calc(100vh - 2 * 2.5rem); }\\n\\n:host /deep/ strong, :host /deep/ a {\\n  color: #4ca6ff; }\\n\\n:host /deep/ nb-card {\\n  margin: 0;\\n  margin: 0 auto;\\n  max-width: 400px; }\\n\\n:host /deep/ .img-icon {\\n  display: block;\\n  margin-left: auto;\\n  margin-right: auto;\\n  height: 98px;\\n  width: 118px; }\\n\\n:host /deep/ .flex-centered {\\n  margin: auto; }\\n\\n:host /deep/ nb-card-body {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n\\n:host /deep/ form {\\n  width: 100%; }\\n\\n:host /deep/ .alert {\\n  text-align: center; }\\n\\n:host /deep/ .title {\\n  margin-bottom: 0.75rem;\\n  text-align: center; }\\n\\n:host /deep/ .sub-title {\\n  margin-bottom: 2rem;\\n  text-align: center; }\\n\\n:host /deep/ .checkbox {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n      -ms-flex-pack: justify;\\n          justify-content: space-between;\\n  margin-bottom: 10px;\\n  font-weight: normal; }\\n\\n:host /deep/ .form-group.accept-group {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n      -ms-flex-pack: justify;\\n          justify-content: space-between;\\n  margin: 2rem 0; }\\n  :host /deep/ .form-group.accept-group .forgot-password {\\n    line-height: 2; }\\n\\n:host /deep/ .links {\\n  text-align: center;\\n  margin-top: 1.75rem; }\\n  :host /deep/ .links .socials {\\n    margin: 1.5rem 0 2.5rem; }\\n  :host /deep/ .links .socials a {\\n    font-size: 2rem;\\n    margin: 0 1rem;\\n    text-decoration: none; }\\n\\n@media (max-width: 550px) {\\n  :host /deep/ /deep/ nb-layout .layout .layout-container .content .columns nb-layout-column {\\n    padding: 0; }\\n  :host /deep/ nb-card {\\n    border-radius: 0;\\n    height: 100vh; } }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.component.scss\n// module id = ../../../../../src/app/auth/auth.component.scss\n// module chunks = auth.module","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'nb-auth',\n  styleUrls: ['./auth.component.scss'],\n  template: `\n    <nb-layout>\n      <nb-layout-column>\n      <div class=\"flex-centered col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n              <h3>Demo Credentials: </h3>\n                  <p>Email: admin@admin.com</p>\n                  <p>Password: admin</p>\n            </div>\n        <nb-card>\n          <nb-card-body>\n            <div class=\"flex-centered col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n              <router-outlet></router-outlet>\n            </div>\n          </nb-card-body>\n        </nb-card>\n      </nb-layout-column>\n    </nb-layout>\n  `,\n})\nexport class NgxAuthComponent implements OnDestroy {\n\n  subscription: any;\n\n  authenticated: boolean = false;\n  token: string = '';\n\n  // showcase of how to use the onAuthenticationChange method\n  constructor() {\n\n  \n  }\n\n  ngOnDestroy(): void {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.component.ts","import { NgModule } from '@angular/core';\nimport { Ng2SmartTableModule } from 'ng2-smart-table';\nimport { ThemeModule } from '../@theme/theme.module';\nimport { AuthsRoutingModule, routedComponents } from './auth-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nconst components = [\n];\n\n@NgModule({\n  imports: [\n    ThemeModule,\n    AuthsRoutingModule,\n    Ng2SmartTableModule,\n    FormsModule\n  ],\n  declarations: [\n    ...routedComponents,\n    ...components\n  ],\n  providers: [\n  ],\n})\nexport class AuthModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/auth.module.ts","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NgxAuthBlockComponent } from '../auth-block/auth-block.component';\nimport swal from 'sweetalert2';\nimport { UserService } from '../../services/user.service';\nimport { User } from '../../models/User';\n\n@Component({\n  selector: 'nb-login',\n  providers: [UserService],\n  template: `\n      <img src=\"../../../assets/images/wolf.png\" class=\"img-icon\"/> <br>\n      <h2 class=\"title\">Sign In to Wolf Manager</h2>\n\n      <form (ngSubmit)=\"login()\" #form=\"ngForm\" autocomplete=\"nope\">\n\n        <div *ngIf=\"showMessages.error && errors && errors.length > 0 && !submitted\"\n             class=\"alert alert-danger\" role=\"alert\">\n          <div><strong>Oh snap!</strong></div>\n          <div *ngFor=\"let error of errors\">{{ error }}</div>\n        </div>\n\n        <div *ngIf=\"showMessages.success && messages && messages.length > 0 && !submitted\"\n             class=\"alert alert-success\" role=\"alert\">\n          <div><strong>Hooray!</strong></div>\n          <div *ngFor=\"let message of messages\">{{ message }}</div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-email\" class=\"sr-only\">Email address</label>\n          <input name=\"email\" [(ngModel)]=\"user.email\" id=\"input-email\" pattern=\".+@.+\\..+\"\n                 class=\"form-control\" placeholder=\"Email address\" #email=\"ngModel\"\n                 [class.form-control-danger]=\"email.invalid && email.touched\" autofocus\n                 [required]=\"getConfigValue('forms.validation.email.required')\">\n          <small class=\"form-text error\" *ngIf=\"email.invalid && email.touched && email.errors?.required\">\n            Email is required!\n          </small>\n          <small class=\"form-text error\"\n                 *ngIf=\"email.invalid && email.touched && email.errors?.pattern\">\n            Email should be the real one!\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-password\" class=\"sr-only\">Password</label>\n          <input name=\"password\" [(ngModel)]=\"user.password\" type=\"password\" id=\"input-password\"\n                 class=\"form-control\" placeholder=\"Password\" #password=\"ngModel\"\n                 [class.form-control-danger]=\"password.invalid && password.touched\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\">\n          <small class=\"form-text error\" *ngIf=\"password.invalid && password.touched && password.errors?.required\">\n            Password is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\">\n            Password should contains\n            from {{ getConfigValue('forms.validation.password.minLength') }}\n            to {{ getConfigValue('forms.validation.password.maxLength') }}\n            characters\n          </small>\n        </div>\n\n        <div class=\"form-group accept-group col-sm-12\">\n          <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\">Remember me</nb-checkbox>\n          <a class=\"forgot-password\" routerLink=\"../request-password\">Forgot Password?</a>\n        </div>\n\n        <button [disabled]=\"submitted || !form.valid\" class=\"btn btn-block btn-hero-info\"\n                [class.btn-pulse]=\"submitted\">\n          Sign In\n        </button>\n      </form>\n\n      <div class=\"links\">\n\n        <small class=\"form-text\">\n          Don't have an account? <a routerLink=\"../register\"><strong>Sign Up</strong></a>\n        </small>\n      </div>\n  `,\n})\nexport class NgxLoginComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  provider: string = '';\n\n  errors: string[] = [];\n  messages: string[] = [];\n  submitted: boolean = false;\n\n  public user: User;\n\n  constructor(private _userService: UserService,\n    private _router: Router) {\n    this.user = new User('','','','','','');\n  }\n\n  login(): void {\n    this._userService.login(this.user).subscribe(\n      response => { console.log(response);\n        if (!response) { \n          swal({\n            type: 'error',\n            title: 'The identity is incorrect',\n            showConfirmButton: false,\n          })\n        } else {\n          let user = response;\n          if(this.user.password == user.password) {\n            localStorage.setItem('identity', JSON.stringify(user));\n            this._router.navigate(['../../pages/dashboard']);\n            this.user = user;\n          } else {\n            swal({\n              type: 'error',\n              title: 'The password is incorrect',\n              showConfirmButton: false,\n            })\n          }\n          \n        }\n      },\n      error => { \n        swal({\n          type: 'error',\n          title: 'The email is incorrect',\n          showConfirmButton: false,\n        })\n      }\n    );\n    console.log(this.user);\n  }\n\n  getConfigValue(key: string): any {\n\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/login/login.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n:host .title {\\n  margin-bottom: 2rem; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/register/register.component.scss\n// module id = ../../../../../src/app/auth/register/register.component.scss\n// module chunks = auth.module","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { User } from '../../models/User';\nimport swal from 'sweetalert2';\n\n@Component({\n  selector: 'nb-register',\n  styleUrls: ['./register.component.scss'],\n  providers: [UserService],\n  template: `\n  <img src=\"../../../assets/images/wolf.png\" class=\"img-icon\"/> <br>\n      <h2 class=\"title\">Sign Up to Wolf Manager</h2>\n      <form (ngSubmit)=\"register()\" #form=\"ngForm\">\n\n      <div class=\"form-group row\">\n      <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">First Name</label>\n      <div class=\"col-sm-9\">\n        <input [(ngModel)]=\"user_register.first_name\" name=\"title\" type=\"name\" class=\"form-control\" id=\"inputFinanceCategory2\" placeholder=\"Enter your first name\">\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Last Name</label>\n      <div class=\"col-sm-9\">\n        <input [(ngModel)]=\"user_register.last_name\" name=\"title\" type=\"name\" class=\"form-control\" id=\"inputFinanceCategory3\" placeholder=\"Enter your last name\">\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Username</label>\n      <div class=\"col-sm-9\">\n        <input [(ngModel)]=\"user_register.username\" name=\"title\" type=\"name\" class=\"form-control\" id=\"inputFinanceCategory4\" placeholder=\"Enter your username\">\n      </div>\n    </div>\n\n        <div class=\"form-group row\">\n        <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Email</label>\n      <div class=\"col-sm-9\">\n          <label for=\"input-email\" class=\"sr-only\">Email address</label>\n          <input name=\"email\" [(ngModel)]=\"user_register.email\" id=\"input-email\" #email=\"ngModel\"\n                 class=\"form-control\" placeholder=\"Email address\" pattern=\".+@.+\\..+\"\n                 [class.form-control-danger]=\"email.invalid && email.touched\"\n                 [required]=\"getConfigValue('forms.validation.email.required')\">\n          <small class=\"form-text error\" *ngIf=\"email.invalid && email.touched && email.errors?.required\">\n            Email is required!\n          </small>\n          <small class=\"form-text error\"\n                 *ngIf=\"email.invalid && email.touched && email.errors?.pattern\">\n            Email should be the real one!\n          </small>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n        <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Password</label>\n      <div class=\"col-sm-9\">\n          <label for=\"input-password\" class=\"sr-only\">Password</label>\n          <input name=\"password\" [(ngModel)]=\"user_register.password\" type=\"password\" id=\"input-password\"\n                 class=\"form-control\" placeholder=\"Password\" #password=\"ngModel\"\n                 [class.form-control-danger]=\"password.invalid && password.touched\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\">\n          <small class=\"form-text error\" *ngIf=\"password.invalid && password.touched && password.errors?.required\">\n            Password is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\">\n            Password should contains\n            from {{ getConfigValue('forms.validation.password.minLength') }}\n            to {{ getConfigValue('forms.validation.password.maxLength') }}\n            characters\n          </small></div>\n        </div>\n\n        <div class=\"form-group row\">\n        <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Confirm Password</label>\n      <div class=\"col-sm-9\">\n          <label for=\"input-re-password\" class=\"sr-only\">Repeat password</label>\n          <input\n            name=\"rePass\" [(ngModel)]=\"confirmPassword\" type=\"password\" id=\"input-re-password\"\n            class=\"form-control\" placeholder=\"Confirm Password\" #rePass=\"ngModel\"\n            [class.form-control-danger]=\"(rePass.invalid || password.value != rePass.value) && rePass.touched\"\n            [required]=\"getConfigValue('forms.validation.password.required')\">\n          <small class=\"form-text error\"\n                 *ngIf=\"rePass.invalid && rePass.touched && rePass.errors?.required\">\n            Password confirmation is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"rePass.touched && password.value != rePass.value && !rePass.errors?.required\">\n            Password does not match the confirm password.\n          </small></div>\n        </div>\n\n        <div class=\"form-group row\">\n      <label for=\"inputTitle\" class=\"col-sm-3 col-form-label\">Role</label>\n      <div class=\"col-sm-9\">\n        <input [(ngModel)]=\"user_register.role\" name=\"title\" type=\"name\" class=\"form-control\" id=\"inputFinanceCategory5\" placeholder=\"Enter your role\">\n      </div>\n    </div>\n\n        <div class=\"form-group accept-group col-sm-12\" *ngIf=\"getConfigValue('forms.register.terms')\">\n          <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n            Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n          </nb-checkbox>\n        </div>\n\n        <button [disabled]=\"submitted || !form.valid\" class=\"btn btn-block btn-hero-info\"\n                [class.btn-pulse]=\"submitted\">\n          Register\n        </button>\n      </form>\n\n      <div class=\"links\">\n        <small class=\"form-text\">\n          Already have an account? <a routerLink=\"../login\"><strong>Sign in</strong></a>\n        </small>\n      </div>\n  `,\n})\nexport class NgxRegisterComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  provider: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  \n  public user_register: User;\n\n  constructor(private _userService: UserService,\n    private _router: Router) {\n    this.user_register = new User('','','','','','');\n  }\n\n  register(): void {\n    this._userService.insert(this.user_register).subscribe(\n      response => {\n        let user = response.user;\n        swal({\n          type: 'success',\n          title: 'Sign Up Success',\n          showConfirmButton: false,\n        })\n        if (!user) { } else {\n          this.user_register = user;\n          this.user_register = new User('', '','','','','');\n        }\n      },\n      error => { }\n    );\n  }\n\n  getConfigValue(key: string): any {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/register/register.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n:host .links {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n      -ms-flex-pack: justify;\\n          justify-content: space-between; }\\n\\n:host .form-group:last-of-type {\\n  margin-bottom: 3rem; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/request-password/request-password.component.scss\n// module id = ../../../../../src/app/auth/request-password/request-password.component.scss\n// module chunks = auth.module","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'nb-request-password-page',\n  styleUrls: ['./request-password.component.scss'],\n  template: `\n  <img src=\"../../../assets/images/wolf.png\" class=\"img-icon\"/> <br>\n      <h2 class=\"title\">Forgot Password</h2>\n      <small class=\"form-text sub-title\">Enter your email adress and we’ll send a link to reset your password</small>\n      <form (ngSubmit)=\"requestPass()\" #requestPassForm=\"ngForm\">\n\n        <div *ngIf=\"showMessages.error && errors && errors.length > 0 && !submitted\"\n             class=\"alert alert-danger\" role=\"alert\">\n          <div><strong>Oh snap!</strong></div>\n          <div *ngFor=\"let error of errors\">{{ error }}</div>\n        </div>\n        <div *ngIf=\"showMessages.success && messages && messages.length > 0 && !submitted\"\n             class=\"alert alert-success\" role=\"alert\">\n          <div><strong>Hooray!</strong></div>\n          <div *ngFor=\"let message of messages\">{{ message }}</div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-email\" class=\"sr-only\">Enter your email address</label>\n          <input name=\"email\" [(ngModel)]=\"user.email\" id=\"input-email\" #email=\"ngModel\"\n                 class=\"form-control\" placeholder=\"Email address\" pattern=\".+@.+\\..+\"\n                 [class.form-control-danger]=\"email.invalid && email.touched\"\n                 [required]=\"getConfigValue('forms.validation.email.required')\"\n                 autofocus>\n          <small class=\"form-text error\" *ngIf=\"email.invalid && email.touched && email.errors?.required\">\n            Email is required!\n          </small>\n          <small class=\"form-text error\"\n                 *ngIf=\"email.invalid && email.touched && email.errors?.pattern\">\n            Email should be the real one!\n          </small>\n        </div>\n\n        <button [disabled]=\"submitted || !requestPassForm.form.valid\" class=\"btn btn-hero-info btn-block\"\n                [class.btn-pulse]=\"submitted\">\n          Request password\n        </button>\n      </form>\n\n      <div class=\"links col-sm-12\">\n        <small class=\"form-text\">\n          Already have an account? <a routerLink=\"../login\"><strong>Sign In</strong></a>\n        </small>\n        <small class=\"form-text\">\n          <a routerLink=\"../register\"><strong>Sign Up</strong></a>\n        </small>\n      </div>\n  `,\n})\nexport class NgxRequestPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  provider: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor() {\n  }\n\n  requestPass(): void {\n\n  }\n\n  getConfigValue(key: string): any {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/request-password/request-password.component.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n:host .links {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-pack: justify;\\n      -ms-flex-pack: justify;\\n          justify-content: space-between; }\\n\\n:host .form-group:last-of-type {\\n  margin-bottom: 3rem; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/reset-password/reset-password.component.scss\n// module id = ../../../../../src/app/auth/reset-password/reset-password.component.scss\n// module chunks = auth.module","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'nb-reset-password-page',\n  styleUrls: ['./reset-password.component.scss'],\n  template: `\n  <img src=\"../../../assets/images/wolf.png\" class=\"img-icon\"/> <br>\n      <h2 class=\"title\">Change password</h2>\n      <small class=\"form-text sub-title\">Please enter a new password</small>\n      <form (ngSubmit)=\"resetPass()\" #resetPassForm=\"ngForm\">\n\n        <div *ngIf=\"errors && errors.length > 0 && !submitted\" class=\"alert alert-danger\" role=\"alert\">\n          <div><strong>Oh snap!</strong></div>\n          <div *ngFor=\"let error of errors\">{{ error }}</div>\n        </div>\n        <div *ngIf=\"messages && messages.length > 0 && !submitted\" class=\"alert alert-success\" role=\"alert\">\n          <div><strong>Hooray!</strong></div>\n          <div *ngFor=\"let message of messages\">{{ message }}</div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-password\" class=\"sr-only\">New Password</label>\n          <input name=\"password\" [(ngModel)]=\"user.password\" type=\"password\" id=\"input-password\"\n                 class=\"form-control form-control-lg first\" placeholder=\"New Password\" #password=\"ngModel\"\n                 [class.form-control-danger]=\"password.invalid && password.touched\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n                 autofocus>\n          <small class=\"form-text error\" *ngIf=\"password.invalid && password.touched && password.errors?.required\">\n            Password is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\">\n            Password should contains\n            from {{getConfigValue('forms.validation.password.minLength')}}\n            to {{getConfigValue('forms.validation.password.maxLength')}}\n            characters\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-re-password\" class=\"sr-only\">Confirm Password</label>\n          <input\n            name=\"rePass\" [(ngModel)]=\"user.confirmPassword\" type=\"password\" id=\"input-re-password\"\n            class=\"form-control form-control-lg last\" placeholder=\"Confirm Password\" #rePass=\"ngModel\"\n            [class.form-control-danger]=\"(rePass.invalid || password.value != rePass.value) && rePass.touched\"\n            [required]=\"getConfigValue('forms.validation.password.required')\">\n          <small class=\"form-text error\"\n                 *ngIf=\"rePass.invalid && rePass.touched && rePass.errors?.required\">\n            Password confirmation is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"rePass.touched && password.value != rePass.value && !rePass.errors?.required\">\n            Password does not match the confirm password.\n          </small>\n        </div>\n\n        <button [disabled]=\"submitted || !resetPassForm.form.valid\" class=\"btn btn-hero-info btn-block\"\n                [class.btn-pulse]=\"submitted\">\n          Change password\n        </button>\n      </form>\n\n      <div class=\"links col-sm-12\">\n        <small class=\"form-text\">\n          Already have an account? <a routerLink=\"../login\"><strong>Sign In</strong></a>\n        </small>\n        <small class=\"form-text\">\n          <a routerLink=\"../register\"><strong>Sign Up</strong></a>\n        </small>\n      </div>\n  `,\n})\nexport class NgxResetPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  provider: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor() {\n  }\n\n  resetPass(): void {\n\n  }\n\n  getConfigValue(key: string): any {\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/josealonso/Desktop/wolfmanager/client/src/app/auth/reset-password/reset-password.component.ts"],"sourceRoot":"webpack:///"}